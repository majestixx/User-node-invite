<?php

/**
 * @file User node invite module file.
 */

/**
 * Implements hook_help().
 */
function user_node_invite_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_node_invite':
      $output = 'Insert help text';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function user_node_invite_menu() {
  $items = array();

  $items['node/%node/user-node-invite'] = array(
    'title' => 'Invite users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_node_invite_page', 1), //refers to: function user_node_invite_page($form, &$form_state, $node)
    //'access callback' => 'content_access_node_page_access',
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'file' => 'content_access.admin.inc',
    //'theme callback' => '_node_custom_theme',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function user_node_invite_permission() {
  return array(
    'grant user node invite' => array(
      'title' => t('Invite users to nodes'),
      'description' => t('Invite users for any nodes'),
    ),
    'grant user own node invite' => array(
      'title' => t('Invite users to own nodes'),
      'description' => t('Invite users for own nodes'),
    ),
  );
}

/**
 * Get access tab page for the viewed node.
 */
 /* function content_access_node_page_access($node) {
  global $user;
  return content_access_get_settings('per_node', $node->type) && user_access('grant content access') ||
    content_access_get_settings('per_node', $node->type) && (user_access('grant own content access') && ($user->uid == $node->uid));
} */

function user_node_invite_page($form, &$form_state, $node){
  $form['name'] = array(
    '#type' => 'textfield',
	'#title' => t('Name'),
	'#required' => FALSE,);
	
	$form['first_name'] = array(
	'#type' => 'textfield',
	'#title' => t('First Name'),
	'#required' => TRUE,);
	
	$form['last_name'] = array(
    '#type' => 'textfield',
	'#title' => t('Last Name'),
	'#required' => TRUE,);
	
	$form['email'] = array(
	'#type' => 'textfield',
	'#title' => t('E-Mail'),
	'#required' => TRUE,);
	
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Invitation'),
    '#weight' => 10,
  );
  
  return $form;
}

function user_node_invite_page_submit($form, &$form_state) {
	dpr($form_state);
	$user_data = $form_state['values'];
	
	$account = array();
	$account['mail'] = $user_data['email'];
	$account['init'] = $user_data['email'];
	$account['status'] = 1;
  
	// Use the provided username if any, or derive it from the email
	$username = empty($user_data['name']) ? preg_replace('/@.*$/', '', $user_data['email']) : $user_data['name'];
	$account['name'] = uni_unique_username($username);
  
	// Generate a random password
	$account['pass'] = user_password();
  
	$account = array_merge($account, uni_ps_test_assign_core_fields($user_data));
	$account = user_save('', $account);
	
	// Use for roles if necessary
	//module_invoke_all('uif_post_create', $account, $user_data, $form_state);
/*
	if ($notify) {
		$account->password = $pass;    // For mail token; _user_mail_notify() expects this
		_user_mail_notify('register_admin_created', $account);
	}*/
	
	// Rechte zuweisen
	
	// Email versenden
	
	drupal_set_message("TODO");
	return $account;
}

function uni_unique_username($name, $uid = 0) {
  // Strip illegal characters
  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);

  // Strip leading and trailing whitespace
  $name = trim($name);

  // Convert any other series of spaces to a single space
  $name = preg_replace('/ +/', ' ', $name);

  // If there's nothing left use a default
  $name = ('' === $name) ? t('user') : $name;

  // Truncate to reasonable size
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;

  // Iterate until we find a unique name
  $i = 0;
  do {
    $newname = empty($i) ? $name : $name . '_' . $i;
    $args = array(':uid' => $uid, ':name' => $newname);
    $found = db_query_range('SELECT uid from {users} WHERE uid <> :uid AND name = :name', 0, 1, $args)->fetchField();
    $i++;
  } while ($found);

  return $newname;
}

function uni_ps_test_assign_core_fields($user_data) {
  $fields = array();
  
  // see http://hojtsy.hu/blog/2011-jan-31/drupal-7039s-new-multilingual-systems-part-4-node-translation
  $fields['field_profile_firstname'][LANGUAGE_NONE][0]['value'] = $user_data['first_name'];
  $fields['field_profile_name'][LANGUAGE_NONE][0]['value'] = $user_data['last_name'];
  
  return $fields;
}