<?php

/**
 * @file User node invite module file.
 */

/**
 * Implements hook_help().
 */
function user_node_invite_help($path, $arg) {
  switch ($path) {
    case 'admin/help#user_node_invite':
      $output = 'Insert help text';
      return $output;
  }
}

/**
 * Implements hook_menu().
 */
function user_node_invite_menu() {
  $items = array();

  $items['node/%node/user-node-invite'] = array(
    'title' => 'Invite users',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_node_invite_page', 1), //refers to: function user_node_invite_page($form, &$form_state, $node)
    'access callback' => 'user_node_invite_page_access',
    //'access callback' => TRUE,
    'access arguments' => array(1),
    //'file' => 'content_access.admin.inc',
    //'theme callback' => '_node_custom_theme',
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Implements hook_perm().
 */
function user_node_invite_permission() {
  return array(
    'grant user node invite' => array(
      'title' => t('Invite users to nodes'),
      'description' => t('Invite users for any nodes'),
    ),
    'grant user own node invite' => array(
      'title' => t('Invite users to own nodes'),
      'description' => t('Invite users for own nodes'),
    ),
  );
}

/**
 * Get access tab page for the viewed node.
 */
 function user_node_invite_page_access($node) {
  global $user;
  return user_access('grant user node invite') ||
         (user_access('grant user own node invite') && ($user->uid == $node->uid));
}

function user_node_invite_page($form, &$form_state, $node){
  $form['name'] = array(
    '#type' => 'textfield',
	'#title' => t('Name'),
	'#required' => FALSE,);
	
	$form['first_name'] = array(
	'#type' => 'textfield',
	'#title' => t('First Name'),
	'#required' => TRUE,);
	
	$form['last_name'] = array(
	'#type' => 'textfield',
	'#title' => t('Last Name'),
	'#required' => TRUE,);
	
	$form['email'] = array(
	'#type' => 'textfield',
	'#title' => t('E-Mail'),
	'#required' => TRUE,);
	
	$form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create Invitation'),
    '#weight' => 10,
  );
  
  return $form;
}

function user_node_invite_page_submit($form, &$form_state) {
	dpr($form_state);
	$user_data = $form_state['values'];
	
	$account = array();
	$account['mail'] = $user_data['email'];
	$account['init'] = $user_data['email'];
	$account['status'] = 1;
  
	// Use the provided username if any, or derive it from the email
	$username = empty($user_data['name']) ? preg_replace('/@.*$/', '', $user_data['email']) : $user_data['name'];
	$account['name'] = user_node_invite_unique_username($username);
  
	// Generate a random password
	$account['pass'] = user_password();
  
	$account = array_merge($account, user_node_invite_assign_core_fields($user_data));
	$account = user_save('', $account);
	
	// Retrieve Node ID
	if($node=menu_get_object())
		$nid = $node->nid;
		
	// Retrieve User ID
	$uid = (array)$account;
	$uid = $uid['uid'];
	
	// Retrieve ACL ID or create a new ACL if necessary
	$acl_id = acl_get_id_by_name("content_access", "update_" . $nid);

	if($acl_id == null)
		$acl_id = acl_create_acl("content_access", "update_" . $nid);	
	
	// Add user to ACL
	acl_add_user($acl_id, $uid);
	
	// Add node to ACL
	acl_node_add_acl($nid, $acl_id, 0, 1, 0);
	
	// Switch authorization mode of node to acl, if this was not already done before
	$testbla = db_query('SELECT * FROM node_access WHERE nid = :nid AND realm = :acl', array(':nid' => $nid, ':acl' => "acl"));
	$rights_missing = true;
	foreach($testbla as $test) {
		if(isset($test))
			$rights_missing = false;
	}
	
	if($rights_missing) {
		$access_entry = new stdClass;
		$access_entry->nid = $nid;
		$access_entry->gid = $acl_id;
		$access_entry->realm = "acl";
		$access_entry->grant_view = 0;
		$access_entry->grant_update = 1;
		$access_entry->grant_delete = 0;
		drupal_write_record("node_access", $access_entry);
	}

	// TODO: Send Mail
	/*if ($notify) {
		$account->password = $pass;    // For mail token; _user_mail_notify() expects this
		_user_mail_notify('register_admin_created', $account);
	}*/
	
	drupal_set_message("TODO");
	return $account;
}

function user_node_invite_unique_username($name, $uid = 0) {
  // Strip illegal characters
  $name = preg_replace('/[^\x{80}-\x{F7} a-zA-Z0-9@_.\'-]/', '', $name);

  // Strip leading and trailing whitespace
  $name = trim($name);

  // Convert any other series of spaces to a single space
  $name = preg_replace('/ +/', ' ', $name);

  // If there's nothing left use a default
  $name = ('' === $name) ? t('user') : $name;

  // Truncate to reasonable size
  $name = (drupal_strlen($name) > (USERNAME_MAX_LENGTH - 10)) ? drupal_substr($name, 0, USERNAME_MAX_LENGTH - 11) : $name;

  // Iterate until we find a unique name
  $i = 0;
  do {
    $newname = empty($i) ? $name : $name . '_' . $i;
    $args = array(':uid' => $uid, ':name' => $newname);
    $found = db_query_range('SELECT uid from {users} WHERE uid <> :uid AND name = :name', 0, 1, $args)->fetchField();
    $i++;
  } while ($found);

  return $newname;
}

function user_node_invite_assign_core_fields($user_data) {
  $fields = array();
  
  // see http://hojtsy.hu/blog/2011-jan-31/drupal-7039s-new-multilingual-systems-part-4-node-translation
  $fields['field_profile_firstname'][LANGUAGE_NONE][0]['value'] = $user_data['first_name'];
  $fields['field_profile_name'][LANGUAGE_NONE][0]['value'] = $user_data['last_name'];
  
  return $fields;
}